//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.8766
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cm {
    
    
    /// <summary>
    /// Projection of class Cm.RevisionInfo
    /// </summary>
    public partial class RevisionInfo : InterSystems.Data.CacheTypes.CacheSerialObject {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "Cm.RevisionInfo";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 26762;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(24);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(0);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(5);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static RevisionInfo() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("Cm.RevisionInfo", typeof(RevisionInfo));
            ;
            Cm.RevisionInfo.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("DateTime", 8, 0, 30507));
            Cm.RevisionInfo.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Identify", 4, 0, 22661));
            Cm.RevisionInfo.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("TerminalIP", 4, 0, 22661));
            Cm.RevisionInfo.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("TerminalName", 4, 0, 22661));
            Cm.RevisionInfo.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("UserId", 4, 0, 22661));
            ;
            Cm.RevisionInfo.CheckSumMethodDict.Add("%ClassName", 37651);
            Cm.RevisionInfo.CheckSumMethodDict.Add("%Delete", 56384);
            Cm.RevisionInfo.CheckSumMethodDict.Add("%DeleteId", 21679);
            Cm.RevisionInfo.CheckSumMethodDict.Add("%IsA", 55457);
            Cm.RevisionInfo.CheckSumMethodDict.Add("%ObjectIsNull", 43277);
            Cm.RevisionInfo.CheckSumMethodDict.Add("%Open", 38965);
            Cm.RevisionInfo.CheckSumMethodDict.Add("%OpenId", 64729);
            Cm.RevisionInfo.CheckSumMethodDict.Add("DateTimeDisplayToLogical", 64279);
            Cm.RevisionInfo.CheckSumMethodDict.Add("DateTimeIsValid", 31698);
            Cm.RevisionInfo.CheckSumMethodDict.Add("DateTimeLogicalToDisplay", 34669);
            Cm.RevisionInfo.CheckSumMethodDict.Add("IdentifyDisplayToLogical", 5545);
            Cm.RevisionInfo.CheckSumMethodDict.Add("IdentifyIsValid", 31698);
            Cm.RevisionInfo.CheckSumMethodDict.Add("IdentifyLogicalToDisplay", 5545);
            Cm.RevisionInfo.CheckSumMethodDict.Add("LogicalToOdbc", 364);
            Cm.RevisionInfo.CheckSumMethodDict.Add("OdbcToLogical", 364);
            Cm.RevisionInfo.CheckSumMethodDict.Add("TerminalIPDisplayToLogical", 5545);
            Cm.RevisionInfo.CheckSumMethodDict.Add("TerminalIPIsValid", 31698);
            Cm.RevisionInfo.CheckSumMethodDict.Add("TerminalIPLogicalToDisplay", 5545);
            Cm.RevisionInfo.CheckSumMethodDict.Add("TerminalNameDisplayToLogical", 5545);
            Cm.RevisionInfo.CheckSumMethodDict.Add("TerminalNameIsValid", 31698);
            Cm.RevisionInfo.CheckSumMethodDict.Add("TerminalNameLogicalToDisplay", 5545);
            Cm.RevisionInfo.CheckSumMethodDict.Add("UserIdDisplayToLogical", 5545);
            Cm.RevisionInfo.CheckSumMethodDict.Add("UserIdIsValid", 31698);
            Cm.RevisionInfo.CheckSumMethodDict.Add("UserIdLogicalToDisplay", 5545);
            ;
        }
        
        /// <summary>Internal API</summary>
        public RevisionInfo() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public RevisionInfo(InterSystems.Data.CacheClient.CacheConnection conn, string arg) {
            try {
                System.Threading.Monitor.Enter(conn);
                this.Init(conn, Cm.RevisionInfo.ServerClassName, arg);
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public RevisionInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                this.Init(conn, Cm.RevisionInfo.ServerClassName);
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of property DateTime
        /// </summary>
        public virtual System.Nullable<System.DateTime> DateTime {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, 8);
                        this.GetPropertyS("DateTime", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheTimestampReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("DateTime", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Identify
        /// </summary>
        public virtual string Identify {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, 4);
                        this.GetPropertyS("Identify", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Identify", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property TerminalIP
        /// </summary>
        public virtual string TerminalIP {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, 4);
                        this.GetPropertyS("TerminalIP", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("TerminalIP", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property TerminalName
        /// </summary>
        public virtual string TerminalName {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, 4);
                        this.GetPropertyS("TerminalName", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("TerminalName", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property UserId
        /// </summary>
        public virtual string UserId {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, 4);
                        this.GetPropertyS("UserId", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("UserId", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method %ClassName
        /// </summary>
        public static string SysClassName(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<bool> fullname) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 4);
                    mtdSignature.Add(fullname, false);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "%ClassName", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %Delete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysDelete(InterSystems.Data.CacheClient.CacheConnection conn, byte[] oid, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(oid, false);
                    mtdSignature.Add(concurrency, false);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "%Delete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %DeleteId
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysDeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(id, false);
                    mtdSignature.Add(concurrency, false);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "%DeleteId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %IsA
        /// </summary>
        public static System.Nullable<long> SysIsA(InterSystems.Data.CacheClient.CacheConnection conn, string isclass) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 1);
                    mtdSignature.Add(isclass, false);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "%IsA", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %ObjectIsNull
        /// </summary>
        public static System.Nullable<bool> SysObjectIsNull(InterSystems.Data.CacheClient.CacheConnection conn, byte[] pOID) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 9);
                    mtdSignature.Add(pOID, false);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "%ObjectIsNull", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %Open
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheObject SysOpen(InterSystems.Data.CacheClient.CacheConnection conn, byte[] initvalue, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(InterSystems.Data.CacheTypes.CacheObject));
                    mtdSignature.Add(initvalue, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "%Open", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheObject)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %OpenId
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheObject SysOpenId(InterSystems.Data.CacheClient.CacheConnection conn, string initvalue, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(InterSystems.Data.CacheTypes.CacheObject));
                    mtdSignature.Add(initvalue, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "%OpenId", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheObject)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method DateTimeDisplayToLogical
        /// </summary>
        public static System.Nullable<System.DateTime> DateTimeDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 8);
                    mtdSignature.Add(_argument1, false);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "DateTimeDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheTimestampReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method DateTimeIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DateTimeIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(_argument1, false);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "DateTimeIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method DateTimeLogicalToDisplay
        /// </summary>
        public static string DateTimeLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<System.DateTime> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 4);
                    mtdSignature.Add(_argument1, false);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "DateTimeLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IdentifyDisplayToLogical
        /// </summary>
        public static string IdentifyDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 4);
                    mtdSignature.Add(_argument1, false);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "IdentifyDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IdentifyIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus IdentifyIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(_argument1, false);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "IdentifyIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IdentifyLogicalToDisplay
        /// </summary>
        public static string IdentifyLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 4);
                    mtdSignature.Add(_argument1, false);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "IdentifyLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method LogicalToOdbc
        /// </summary>
        public static string LogicalToOdbc(InterSystems.Data.CacheClient.CacheConnection conn, string val) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 4);
                    mtdSignature.Add(val, false);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "LogicalToOdbc", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method OdbcToLogical
        /// </summary>
        public static string OdbcToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string val) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 4);
                    mtdSignature.Add(val, false);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "OdbcToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TerminalIPDisplayToLogical
        /// </summary>
        public static string TerminalIPDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 4);
                    mtdSignature.Add(_argument1, false);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "TerminalIPDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TerminalIPIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus TerminalIPIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(_argument1, false);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "TerminalIPIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TerminalIPLogicalToDisplay
        /// </summary>
        public static string TerminalIPLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 4);
                    mtdSignature.Add(_argument1, false);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "TerminalIPLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TerminalNameDisplayToLogical
        /// </summary>
        public static string TerminalNameDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 4);
                    mtdSignature.Add(_argument1, false);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "TerminalNameDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TerminalNameIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus TerminalNameIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(_argument1, false);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "TerminalNameIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method TerminalNameLogicalToDisplay
        /// </summary>
        public static string TerminalNameLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 4);
                    mtdSignature.Add(_argument1, false);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "TerminalNameLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method UserIdDisplayToLogical
        /// </summary>
        public static string UserIdDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 4);
                    mtdSignature.Add(_argument1, false);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "UserIdDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method UserIdIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus UserIdIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(_argument1, false);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "UserIdIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method UserIdLogicalToDisplay
        /// </summary>
        public static string UserIdLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 4);
                    mtdSignature.Add(_argument1, false);
                    Cm.RevisionInfo.RunClassMethodS(conn, Cm.RevisionInfo.ServerClassName, "UserIdLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(Cm.RevisionInfo.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            Cm.RevisionInfo.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(Cm.RevisionInfo.ServerClassName);
            if (metaInfo.Validate(Cm.RevisionInfo.ClassCheckSum, Cm.RevisionInfo.PropertyInfoColn, Cm.RevisionInfo.CheckSumMethodDict, Cm.RevisionInfo.CheckSumQueryDict, Cm.RevisionInfo.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            Cm.RevisionInfo.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((Cm.RevisionInfo.AllPropertiesInfoColn != null)) {
                return Cm.RevisionInfo.AllPropertiesInfoColn;
            }
            Cm.RevisionInfo.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(Cm.RevisionInfo.PropertyInfoColn);
            return Cm.RevisionInfo.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return Cm.RevisionInfo.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace It {
    
    
    /// <summary>
    /// Projection of class It.EnvIncubator
    /// </summary>
    public partial class EnvIncubator : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "It.EnvIncubator";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 14993;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(31);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(6);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static EnvIncubator() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("It.EnvIncubator", typeof(EnvIncubator));
            ;
            It.EnvIncubator.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("IncubatorId", 4, 0, 22661));
            It.EnvIncubator.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("MeaTime", 8, 0, 30507));
            It.EnvIncubator.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("RevisionInfo", 0, 0, 62600));
            It.EnvIncubator.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Temperature1", 2, 0, 62363));
            It.EnvIncubator.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Temperature2", 2, 0, 62363));
            It.EnvIncubator.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("Temperature3", 2, 0, 62363));
            ;
            It.EnvIncubator.CheckSumMethodDict.Add("%ComposeOid", 26212);
            It.EnvIncubator.CheckSumMethodDict.Add("%DeleteExtent", 16541);
            It.EnvIncubator.CheckSumMethodDict.Add("%IsA", 55457);
            It.EnvIncubator.CheckSumMethodDict.Add("%ObjectIsNull", 43277);
            It.EnvIncubator.CheckSumMethodDict.Add("%SaveIndices", 40887);
            It.EnvIncubator.CheckSumMethodDict.Add("GetIncubatorEnv", 49470);
            It.EnvIncubator.CheckSumMethodDict.Add("GetIncubatorEnvsByAnyProperty", 51053);
            It.EnvIncubator.CheckSumMethodDict.Add("IncubatorIdDisplayToLogical", 5545);
            It.EnvIncubator.CheckSumMethodDict.Add("IncubatorIdIsValid", 31698);
            It.EnvIncubator.CheckSumMethodDict.Add("IncubatorIdLogicalToDisplay", 5545);
            It.EnvIncubator.CheckSumMethodDict.Add("MeaTimeDisplayToLogical", 64279);
            It.EnvIncubator.CheckSumMethodDict.Add("MeaTimeIsValid", 31698);
            It.EnvIncubator.CheckSumMethodDict.Add("MeaTimeLogicalToDisplay", 34669);
            It.EnvIncubator.CheckSumMethodDict.Add("PKDelete", 45404);
            It.EnvIncubator.CheckSumMethodDict.Add("PKExists", 16772);
            It.EnvIncubator.CheckSumMethodDict.Add("PKOpen", 14968);
            It.EnvIncubator.CheckSumMethodDict.Add("RevisionInfoGetObject", 64492);
            It.EnvIncubator.CheckSumMethodDict.Add("RevisionInfoGetObjectId", 17297);
            It.EnvIncubator.CheckSumMethodDict.Add("RevisionInfoIsValid", 57396);
            It.EnvIncubator.CheckSumMethodDict.Add("RevisionInfoSetObject", 32506);
            It.EnvIncubator.CheckSumMethodDict.Add("RevisionInfoSetObjectId", 50028);
            It.EnvIncubator.CheckSumMethodDict.Add("SetData", 57887);
            It.EnvIncubator.CheckSumMethodDict.Add("Temperature1DisplayToLogical", 32585);
            It.EnvIncubator.CheckSumMethodDict.Add("Temperature1IsValid", 31698);
            It.EnvIncubator.CheckSumMethodDict.Add("Temperature1LogicalToDisplay", 33304);
            It.EnvIncubator.CheckSumMethodDict.Add("Temperature2DisplayToLogical", 32585);
            It.EnvIncubator.CheckSumMethodDict.Add("Temperature2IsValid", 31698);
            It.EnvIncubator.CheckSumMethodDict.Add("Temperature2LogicalToDisplay", 33304);
            It.EnvIncubator.CheckSumMethodDict.Add("Temperature3DisplayToLogical", 32585);
            It.EnvIncubator.CheckSumMethodDict.Add("Temperature3IsValid", 31698);
            It.EnvIncubator.CheckSumMethodDict.Add("Temperature3LogicalToDisplay", 33304);
            ;
            It.EnvIncubator.CheckSumQueryDict.Add("Extent", 11878);
        }
        
        /// <summary>Internal API</summary>
        public EnvIncubator() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public EnvIncubator(InterSystems.Data.CacheClient.CacheConnection conn, string arg) {
            try {
                System.Threading.Monitor.Enter(conn);
                this.Init(conn, It.EnvIncubator.ServerClassName, arg);
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public EnvIncubator(InterSystems.Data.CacheClient.CacheConnection conn) {
            try {
                System.Threading.Monitor.Enter(conn);
                this.Init(conn, It.EnvIncubator.ServerClassName);
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of property IncubatorId
        /// </summary>
        public virtual string IncubatorId {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, 4);
                        this.GetPropertyS("IncubatorId", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("IncubatorId", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property MeaTime
        /// </summary>
        public virtual System.Nullable<System.DateTime> MeaTime {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, 8);
                        this.GetPropertyS("MeaTime", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheTimestampReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("MeaTime", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property RevisionInfo
        /// </summary>
        public virtual Cm.RevisionInfo RevisionInfo {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(Cm.RevisionInfo));
                        this.GetPropertyS("RevisionInfo", mtdSignature);
                        return ((Cm.RevisionInfo)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("RevisionInfo", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Temperature1
        /// </summary>
        public virtual System.Nullable<double> Temperature1 {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, 2);
                        this.GetPropertyS("Temperature1", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheDoubleReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Temperature1", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Temperature2
        /// </summary>
        public virtual System.Nullable<double> Temperature2 {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, 2);
                        this.GetPropertyS("Temperature2", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheDoubleReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Temperature2", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property Temperature3
        /// </summary>
        public virtual System.Nullable<double> Temperature3 {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, 2);
                        this.GetPropertyS("Temperature3", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheDoubleReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("Temperature3", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method %ComposeOid
        /// </summary>
        public static void SysComposeOid(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, -1);
                    mtdSignature.Add(id, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "%ComposeOid", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %DeleteExtent
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysDeleteExtent(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> concurrency, ref string deletecount, ref string instancecount, System.Nullable<long> pInitializeExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(deletecount, true);
                    mtdSignature.Add(instancecount, true);
                    mtdSignature.Add(pInitializeExtent, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "%DeleteExtent", mtdSignature);
                    deletecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    instancecount = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %IsA
        /// </summary>
        public static System.Nullable<long> SysIsA(InterSystems.Data.CacheClient.CacheConnection conn, string isclass) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 1);
                    mtdSignature.Add(isclass, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "%IsA", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %ObjectIsNull
        /// </summary>
        public static System.Nullable<bool> SysObjectIsNull(InterSystems.Data.CacheClient.CacheConnection conn, byte[] pOID) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 9);
                    mtdSignature.Add(pOID, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "%ObjectIsNull", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method %SaveIndices
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus SysSaveIndices(InterSystems.Data.CacheClient.CacheConnection conn, string pStartId, string pEndId, System.Nullable<bool> lockExtent) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(pStartId, false);
                    mtdSignature.Add(pEndId, false);
                    mtdSignature.Add(lockExtent, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "%SaveIndices", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method GetIncubatorEnv
        /// </summary>
        public static string GetIncubatorEnv(InterSystems.Data.CacheClient.CacheConnection conn, string IncubatorId, string MeaTime, System.Nullable<long> Temperature1, System.Nullable<long> Temperature2, System.Nullable<long> Temperature3, System.Nullable<long> RevisionInfo) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 4);
                    mtdSignature.Add(IncubatorId, false);
                    mtdSignature.Add(MeaTime, false);
                    mtdSignature.Add(Temperature1, false);
                    mtdSignature.Add(Temperature2, false);
                    mtdSignature.Add(Temperature3, false);
                    mtdSignature.Add(RevisionInfo, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "GetIncubatorEnv", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method GetIncubatorEnvsByAnyProperty
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheSysList GetIncubatorEnvsByAnyProperty(InterSystems.Data.CacheClient.CacheConnection conn, string IncubatorId, string MeaTimeS, string MeaTimeE, System.Nullable<double> Temperature1, System.Nullable<double> Temperature2, System.Nullable<double> Temperature3, string ReDateTimeS, string ReDateTimeE, string ReTerminalIP, string ReTerminalName, string ReUserId, string ReIdentify, System.Nullable<long> GetTemperature, System.Nullable<long> GetRevisionInfo) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 11);
                    mtdSignature.Add(IncubatorId, false);
                    mtdSignature.Add(MeaTimeS, false);
                    mtdSignature.Add(MeaTimeE, false);
                    mtdSignature.Add(Temperature1, false);
                    mtdSignature.Add(Temperature2, false);
                    mtdSignature.Add(Temperature3, false);
                    mtdSignature.Add(ReDateTimeS, false);
                    mtdSignature.Add(ReDateTimeE, false);
                    mtdSignature.Add(ReTerminalIP, false);
                    mtdSignature.Add(ReTerminalName, false);
                    mtdSignature.Add(ReUserId, false);
                    mtdSignature.Add(ReIdentify, false);
                    mtdSignature.Add(GetTemperature, false);
                    mtdSignature.Add(GetRevisionInfo, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "GetIncubatorEnvsByAnyProperty", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheSysListReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IncubatorIdDisplayToLogical
        /// </summary>
        public static string IncubatorIdDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 4);
                    mtdSignature.Add(_argument1, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "IncubatorIdDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IncubatorIdIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus IncubatorIdIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(_argument1, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "IncubatorIdIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IncubatorIdLogicalToDisplay
        /// </summary>
        public static string IncubatorIdLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 4);
                    mtdSignature.Add(_argument1, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "IncubatorIdLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method MeaTimeDisplayToLogical
        /// </summary>
        public static System.Nullable<System.DateTime> MeaTimeDisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 8);
                    mtdSignature.Add(_argument1, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "MeaTimeDisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheTimestampReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method MeaTimeIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus MeaTimeIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(_argument1, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "MeaTimeIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method MeaTimeLogicalToDisplay
        /// </summary>
        public static string MeaTimeLogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<System.DateTime> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 4);
                    mtdSignature.Add(_argument1, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "MeaTimeLogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method PKDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus PKDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, string K2, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(K2, false);
                    mtdSignature.Add(concurrency, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "PKDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method PKExists
        /// </summary>
        public static System.Nullable<bool> PKExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, string K2, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 9);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(K2, false);
                    mtdSignature.Add(id, true);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "PKExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[2])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method PKOpen
        /// </summary>
        public static It.EnvIncubator PKOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, string K2, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(It.EnvIncubator));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(K2, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "PKOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[3])).Value;
                    return ((It.EnvIncubator)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method RevisionInfoGetObject
        /// </summary>
        public virtual byte[] RevisionInfoGetObject(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, 3);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("RevisionInfoGetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheBinaryReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method RevisionInfoGetObjectId
        /// </summary>
        public virtual string RevisionInfoGetObjectId(System.Nullable<long> force) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, 4);
                    mtdSignature.Add(force, false);
                    this.RunMethodS("RevisionInfoGetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method RevisionInfoIsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus RevisionInfoIsValid(InterSystems.Data.CacheClient.CacheConnection conn, string value) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(value, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "RevisionInfoIsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method RevisionInfoSetObject
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus RevisionInfoSetObject(byte[] newvalue) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, 5);
                    mtdSignature.Add(newvalue, false);
                    this.RunMethodS("RevisionInfoSetObject", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method RevisionInfoSetObjectId
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheStatus RevisionInfoSetObjectId(string newid) {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, 5);
                    mtdSignature.Add(newid, false);
                    this.RunMethodS("RevisionInfoSetObjectId", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>
        /// Projection of method SetData
        /// </summary>
        public static System.Nullable<long> SetData(InterSystems.Data.CacheClient.CacheConnection conn, string IncubatorId, System.Nullable<System.DateTime> MeaTime, System.Nullable<double> Temperature1, System.Nullable<double> Temperature2, System.Nullable<double> Temperature3, string TerminalIP, string TerminalName, string revUserId) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 1);
                    mtdSignature.Add(IncubatorId, false);
                    mtdSignature.Add(MeaTime, false);
                    mtdSignature.Add(Temperature1, false);
                    mtdSignature.Add(Temperature2, false);
                    mtdSignature.Add(Temperature3, false);
                    mtdSignature.Add(TerminalIP, false);
                    mtdSignature.Add(TerminalName, false);
                    mtdSignature.Add(revUserId, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "SetData", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheIntReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method Temperature1DisplayToLogical
        /// </summary>
        public static System.Nullable<double> Temperature1DisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 2);
                    mtdSignature.Add(_argument1, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "Temperature1DisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheDoubleReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method Temperature1IsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus Temperature1IsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(_argument1, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "Temperature1IsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method Temperature1LogicalToDisplay
        /// </summary>
        public static string Temperature1LogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<double> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 4);
                    mtdSignature.Add(_argument1, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "Temperature1LogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method Temperature2DisplayToLogical
        /// </summary>
        public static System.Nullable<double> Temperature2DisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 2);
                    mtdSignature.Add(_argument1, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "Temperature2DisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheDoubleReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method Temperature2IsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus Temperature2IsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(_argument1, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "Temperature2IsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method Temperature2LogicalToDisplay
        /// </summary>
        public static string Temperature2LogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<double> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 4);
                    mtdSignature.Add(_argument1, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "Temperature2LogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method Temperature3DisplayToLogical
        /// </summary>
        public static System.Nullable<double> Temperature3DisplayToLogical(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 2);
                    mtdSignature.Add(_argument1, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "Temperature3DisplayToLogical", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheDoubleReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method Temperature3IsValid
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus Temperature3IsValid(InterSystems.Data.CacheClient.CacheConnection conn, string _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(_argument1, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "Temperature3IsValid", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method Temperature3LogicalToDisplay
        /// </summary>
        public static string Temperature3LogicalToDisplay(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<double> _argument1) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, 4);
                    mtdSignature.Add(_argument1, false);
                    It.EnvIncubator.RunClassMethodS(conn, It.EnvIncubator.ServerClassName, "Temperature3LogicalToDisplay", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of query Extent
        /// </summary>
        public static InterSystems.Data.CacheClient.CacheCommand Extent(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.CacheCommand cmd = new InterSystems.Data.CacheClient.CacheCommand("{ call It.EnvIncubator_Extent}", conn);
            return cmd;
        }
        
        /// <summary>Projection of %Open()</summary>
        public static It.EnvIncubator Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((It.EnvIncubator)(conn.OpenProxyObj(It.EnvIncubator.ServerClassName, id, concurrency, typeof(It.EnvIncubator), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static It.EnvIncubator Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((It.EnvIncubator)(conn.OpenProxyObj(It.EnvIncubator.ServerClassName, id, typeof(It.EnvIncubator), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static It.EnvIncubator Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((It.EnvIncubator)(conn.OpenProxyObj(It.EnvIncubator.ServerClassName, id, typeof(It.EnvIncubator))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static It.EnvIncubator Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((It.EnvIncubator)(conn.OpenProxyObj(It.EnvIncubator.ServerClassName, id, concurrency, timeout, typeof(It.EnvIncubator), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static It.EnvIncubator OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((It.EnvIncubator)(conn.OpenProxyObj(It.EnvIncubator.ServerClassName, id, concurrency, typeof(It.EnvIncubator), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static It.EnvIncubator OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((It.EnvIncubator)(conn.OpenProxyObj(It.EnvIncubator.ServerClassName, id, typeof(It.EnvIncubator), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static It.EnvIncubator OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((It.EnvIncubator)(conn.OpenProxyObj(It.EnvIncubator.ServerClassName, id, typeof(It.EnvIncubator))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static It.EnvIncubator OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((It.EnvIncubator)(conn.OpenProxyObj(It.EnvIncubator.ServerClassName, id, concurrency, timeout, typeof(It.EnvIncubator), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return It.EnvIncubator.ExistsIdInternal(conn, It.EnvIncubator.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return It.EnvIncubator.DeleteIdInternal(conn, It.EnvIncubator.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return It.EnvIncubator.KillExtentInternal(conn, It.EnvIncubator.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(It.EnvIncubator.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            It.EnvIncubator.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(It.EnvIncubator.ServerClassName);
            if (metaInfo.Validate(It.EnvIncubator.ClassCheckSum, It.EnvIncubator.PropertyInfoColn, It.EnvIncubator.CheckSumMethodDict, It.EnvIncubator.CheckSumQueryDict, It.EnvIncubator.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            It.EnvIncubator.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((It.EnvIncubator.AllPropertiesInfoColn != null)) {
                return It.EnvIncubator.AllPropertiesInfoColn;
            }
            It.EnvIncubator.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(It.EnvIncubator.PropertyInfoColn);
            return It.EnvIncubator.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return It.EnvIncubator.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
